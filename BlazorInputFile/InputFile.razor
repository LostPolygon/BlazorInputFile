@using Microsoft.AspNetCore.Http
@using Microsoft.AspNetCore.Mvc
@using Microsoft.AspNetCore.Mvc.Abstractions
@using Microsoft.AspNetCore.Mvc.Routing
@implements IDisposable
@inject IJSRuntime JSRuntime
@inject FileUploadService FileUploadService
@inject IUrlHelperFactory UrlHelperFactory
@inject IHttpContextAccessor HttpContextAccessor

<input type="file" @ref="InputFileElement" @attributes="UnmatchedParameters"/>

@code {

    [Parameter(CaptureUnmatchedValues = true)]
    public Dictionary<string, object> UnmatchedParameters { get; set; }

    [Parameter]
    public EventCallback<IFileListEntry[]> OnChange { get; set; }

    internal ElementReference InputFileElement { get; set; }
    private IDisposable _thisReference;
    private FileListEntryImpl[] _lastKnownFiles = new FileListEntryImpl[0];

    [JSInvokable]
    public Task NotifyChange(FileListEntryImpl[] files) {
        foreach (FileListEntryImpl file in files) {
            // So that method invocations on the file can be dispatched back here
            file.Owner = (InputFile) (object) this;
        }

        // If the file got removed from the new list, Dispose its stream, if any
        foreach (FileListEntryImpl knownFile in _lastKnownFiles) {
            if (!files.Contains(knownFile)) {
                knownFile.Dispose();
            }
        }

        _lastKnownFiles = files;

        return OnChange.InvokeAsync(files);
    }

    public async Task Reset() {
        await JSRuntime.InvokeAsync<object>("BlazorInputFile.reset", InputFileElement, _thisReference);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender) {
        if (firstRender) {
            _thisReference = DotNetObjectReference.Create(this);
            await JSRuntime.InvokeAsync<object>("BlazorInputFile.init", InputFileElement, _thisReference);
        }
    }

    internal Stream OpenFileStream(FileListEntryImpl file) {
        ActionContext actionContext = new ActionContext(
            HttpContextAccessor.HttpContext,
            new Microsoft.AspNetCore.Routing.RouteData(),
            new ActionDescriptor()
            );
        IUrlHelper urlHelper = UrlHelperFactory.GetUrlHelper(actionContext);
        return SharedMemoryFileListEntryStream.IsSupported(JSRuntime)
            ? (Stream) new SharedMemoryFileListEntryStream(JSRuntime, InputFileElement, file)
            : new RemoteFileListEntryStream(JSRuntime, InputFileElement, file, FileUploadService, urlHelper);
    }

    void IDisposable.Dispose() {
        _thisReference?.Dispose();
        foreach (FileListEntryImpl knownFile in _lastKnownFiles) {
            knownFile.Dispose();
        }
    }

}
